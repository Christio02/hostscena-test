/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch'
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export type SanityImagePalette = {
  _type: 'sanity.imagePalette'
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions'
  height?: number
  width?: number
  aspectRatio?: number
}

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot'
  x?: number
  y?: number
  height?: number
  width?: number
}

export type SanityImageCrop = {
  _type: 'sanity.imageCrop'
  top?: number
  bottom?: number
  left?: number
  right?: number
}

export type SanityFileAsset = {
  _id: string
  _type: 'sanity.fileAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export type SanityImageAsset = {
  _id: string
  _type: 'sanity.imageAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata'
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}

export type Geopoint = {
  _type: 'geopoint'
  lat?: number
  lng?: number
  alt?: number
}

export type Slug = {
  _type: 'slug'
  current?: string
  source?: string
}

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData'
  name?: string
  id?: string
  url?: string
}

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageCrop
  | SanityFileAsset
  | SanityImageAsset
  | SanityImageMetadata
  | Geopoint
  | Slug
  | SanityAssetSourceData
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: ./src/sanity/lib/queries.ts
// Variable: NEWS_QUERY
// Query: *[_type == "news" && defined(slug.current)] | order(date desc)[0...12]{  _id,  title,  slug,  tag,  person,  date,  time,  image,  content}
export type NEWS_QUERYResult = Array<never>
// Variable: NEWS_DETAIL_QUERY
// Query: *[_type == "news" && slug.current == $slug][0]{  _id,  title,  slug,  tag,  person,  date,  time,  image,  content}
export type NEWS_DETAIL_QUERYResult = null
// Variable: ALL_NEWS_QUERY
// Query: *[_type == "news" && defined(slug.current)] | order(date desc){  _id,  title,  slug,  tag,  person,  date,  time,  image,  content}
export type ALL_NEWS_QUERYResult = Array<never>
// Variable: EVENTS_QUERY
// Query: *[_type == "event" && defined(slug.current)] | order(date asc)[0...12]{  _id,  title,  slug,  performer,  date,  startTime,  endTime,  location,  tag,  image,  content}
export type EVENTS_QUERYResult = Array<never>
// Variable: EVENT_DETAIL_QUERY
// Query: *[_type == "event" && slug.current == $slug][0]{  _id,  title,  slug,  performer,  date,  startTime,  endTime,  location,  tag,  image,  content}
export type EVENT_DETAIL_QUERYResult = null
// Variable: ALL_EVENTS_QUERY
// Query: *[_type == "event" && defined(slug.current)] | order(date asc){  _id,  title,  slug,  performer,  date,  startTime,  endTime,  location,  tag,  image,  content}
export type ALL_EVENTS_QUERYResult = Array<never>
// Variable: EVENTS_BY_DATE_QUERY
// Query: *[_type == "event" && defined(slug.current) && date >= $startDate && date <= $endDate] | order(date asc){  _id,  title,  slug,  performer,  date,  startTime,  endTime,  location,  tag,  image,  content}
export type EVENTS_BY_DATE_QUERYResult = Array<never>
// Variable: TEAM_QUERY
// Query: *[_type == "person" && category == "team"]{  _id,  name,  image,  email,  phone,  jobTitle}
export type TEAM_QUERYResult = Array<never>
// Variable: PRAKTIKANTER_QUERY
// Query: *[_type == "person" && category == "praktikanter"]{  _id,  name,  image,  email,  phone,  jobTitle}
export type PRAKTIKANTER_QUERYResult = Array<never>
// Variable: LOCATIONS_QUERY
// Query: *[_type == "location"]{  _id,  name,  image,  link}
export type LOCATIONS_QUERYResult = Array<never>
// Variable: HOME_QUERY
// Query: *[_type == "home"][0]{  _id,  title,  buyTickets1,  buyTickets2,  featuredNews[]->{    _id,    title,    slug,    tag,    person,    date,    time,    image,    content  },  featuredEvents[]->{    _id,    title,    slug,    performer,    date,    startTime,    endTime,    location,    tag,    image,    content  }}
export type HOME_QUERYResult = null
// Variable: PAGE_QUERY
// Query: *[_type == "page" && slug.current == $slug][0]{  _id,  title,  slug,  content}
export type PAGE_QUERYResult = null
// Variable: CONTACT_QUERY
// Query: *[_type == "contact"][0]{  _id,  name,  email,  phone,  jobTitle,  visitingAddress,  postalAddress,  facebookUrl,  instagramUrl}
export type CONTACT_QUERYResult = null
// Variable: LIMITED_NEWS_QUERY
// Query: *[_type == "news" && defined(slug.current)] | order(date desc)[0...$limit]{  _id,  title,  slug,  tag,  person,  date,  time,  image}
export type LIMITED_NEWS_QUERYResult = Array<never>
// Variable: LIMITED_EVENTS_QUERY
// Query: *[_type == "event" && defined(slug.current)] | order(date asc)[0...$limit]{  _id,  title,  slug,  performer,  date,  startTime,  endTime,  location,  tag,  image}
export type LIMITED_EVENTS_QUERYResult = Array<never>

// Query TypeMap
import '@sanity/client'
declare module '@sanity/client' {
  interface SanityQueries {
    '*[_type == "news" && defined(slug.current)] | order(date desc)[0...12]{\n  _id,\n  title,\n  slug,\n  tag,\n  person,\n  date,\n  time,\n  image,\n  content\n}': NEWS_QUERYResult
    '*[_type == "news" && slug.current == $slug][0]{\n  _id,\n  title,\n  slug,\n  tag,\n  person,\n  date,\n  time,\n  image,\n  content\n}': NEWS_DETAIL_QUERYResult
    '*[_type == "news" && defined(slug.current)] | order(date desc){\n  _id,\n  title,\n  slug,\n  tag,\n  person,\n  date,\n  time,\n  image,\n  content\n}': ALL_NEWS_QUERYResult
    '*[_type == "event" && defined(slug.current)] | order(date asc)[0...12]{\n  _id,\n  title,\n  slug,\n  performer,\n  date,\n  startTime,\n  endTime,\n  location,\n  tag,\n  image,\n  content\n}': EVENTS_QUERYResult
    '*[_type == "event" && slug.current == $slug][0]{\n  _id,\n  title,\n  slug,\n  performer,\n  date,\n  startTime,\n  endTime,\n  location,\n  tag,\n  image,\n  content\n}': EVENT_DETAIL_QUERYResult
    '*[_type == "event" && defined(slug.current)] | order(date asc){\n  _id,\n  title,\n  slug,\n  performer,\n  date,\n  startTime,\n  endTime,\n  location,\n  tag,\n  image,\n  content\n}': ALL_EVENTS_QUERYResult
    '*[_type == "event" && defined(slug.current) && date >= $startDate && date <= $endDate] | order(date asc){\n  _id,\n  title,\n  slug,\n  performer,\n  date,\n  startTime,\n  endTime,\n  location,\n  tag,\n  image,\n  content\n}': EVENTS_BY_DATE_QUERYResult
    '*[_type == "person" && category == "team"]{\n  _id,\n  name,\n  image,\n  email,\n  phone,\n  jobTitle\n}': TEAM_QUERYResult
    '*[_type == "person" && category == "praktikanter"]{\n  _id,\n  name,\n  image,\n  email,\n  phone,\n  jobTitle\n}': PRAKTIKANTER_QUERYResult
    '*[_type == "location"]{\n  _id,\n  name,\n  image,\n  link\n}': LOCATIONS_QUERYResult
    '*[_type == "home"][0]{\n  _id,\n  title,\n  buyTickets1,\n  buyTickets2,\n  featuredNews[]->{\n    _id,\n    title,\n    slug,\n    tag,\n    person,\n    date,\n    time,\n    image,\n    content\n  },\n  featuredEvents[]->{\n    _id,\n    title,\n    slug,\n    performer,\n    date,\n    startTime,\n    endTime,\n    location,\n    tag,\n    image,\n    content\n  }\n}': HOME_QUERYResult
    '*[_type == "page" && slug.current == $slug][0]{\n  _id,\n  title,\n  slug,\n  content\n}': PAGE_QUERYResult
    '*[_type == "contact"][0]{\n  _id,\n  name,\n  email,\n  phone,\n  jobTitle,\n  visitingAddress,\n  postalAddress,\n  facebookUrl,\n  instagramUrl\n}': CONTACT_QUERYResult
    '*[_type == "news" && defined(slug.current)] | order(date desc)[0...$limit]{\n  _id,\n  title,\n  slug,\n  tag,\n  person,\n  date,\n  time,\n  image\n}': LIMITED_NEWS_QUERYResult
    '*[_type == "event" && defined(slug.current)] | order(date asc)[0...$limit]{\n  _id,\n  title,\n  slug,\n  performer,\n  date,\n  startTime,\n  endTime,\n  location,\n  tag,\n  image\n}': LIMITED_EVENTS_QUERYResult
  }
}
